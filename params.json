{"name":"FizzBuzz","tagline":"Hello World :)","body":"Lets take a look at the FizzBuzz problem while exploring some of the tradeoffs involved in developing applications.\r\nWe are going to look at a few different implementations of FizzBuzz, each has been designed with different purpose. We will also explore the effect of each implementation.\r\n\r\n## Simple Fizz Buzz\r\n```csharp\r\nfor (int i = 0; i < 100; i++) {\r\n    if (0 == i % 3 || 0 == i % 5) {\r\n        Console.WriteLine(\"FizzBuzz\");\r\n    }\r\n    else if (0 == i % 3) {\r\n        Console.WriteLine(\"Fizz\");\r\n    }\r\n    else if (0 == i % 5) {\r\n        Console.WriteLine(\"Buzz\");\r\n    }\r\n    else {\r\n        Console.WriteLine(i);\r\n    }\r\n}\r\n```\r\n\r\n## Reduce Duplicate Code\r\n```csharp\r\nconst string FIZZ = \"Fizz\";\r\nconst string BUZZ = \"Buzz\";\r\n\r\npublic static void FizzBuzz() {\r\n    for (int i = 0; i < 100; i++) {\r\n        bool isFizz = (0 == i % 3);\r\n        bool isBuzz = (0 == i % 5);\r\n        string result = string.Empty;\r\n\r\n        result += isFizz ? FIZZ : string.Empty;\r\n        result += isBuzz ? BUZZ : string.Empty;\r\n        result += !isFizz && !isBuzz ? i.ToString() : string.Empty;\r\n\r\n        Log(result);\r\n    }\r\n}\r\n```\r\n\r\n## Parameterized\r\n```csharp\r\npublic static void FizzBuzz(IEnumerable<int> range, IEnumerable<Tuple<int, string>> triggers) {\r\n    foreach (int i in range) {\r\n        string result = string.Empty;\r\n        foreach (var trigger in triggers) {\r\n            result += (0 == i % trigger.Item1) ? trigger.Item2 : string.Empty;\r\n        }\r\n        result = string.IsNullOrEmpty(result) ? i.ToString() : result;\r\n        Log(result);\r\n    }\r\n}\r\n```\r\n\r\n## Predicates\r\n```csharp\r\npublic static void FizzBuzz(IEnumerable<int> range, IEnumerable<Tuple<Predicate<int>, string>> triggers) {\r\n    foreach (int i in range) {\r\n        string result = string.Empty;\r\n        foreach (var trigger in triggers) {\r\n            result += trigger.Item1(i) ? trigger.Item2 : string.Empty;\r\n        }\r\n        result = string.IsNullOrEmpty(result) ? i.ToString() : result;\r\n        Log(result);\r\n    }\r\n}\r\n```\r\n\r\n## Lazy Evaluation\r\n```csharp\r\npublic static IEnumerable<string> FizzBuzz_FP(IEnumerable<int> range, IEnumerable<Tuple<Predicate<int>, string>> triggers) {\r\n    return range.Select(i => {\r\n        var parts = triggers.Select(t => t.Item1(i) ? t.Item2 : string.Empty);\r\n        var text = string.Join(string.Empty, parts);\r\n        return string.IsNullOrEmpty(text) ? i.ToString() : text;\r\n    });\r\n}\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}